/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class name_pachler_nio_file_impl_WindowsPathWatchService_OVERLAPPED */

#ifndef _Included_name_pachler_nio_file_impl_WindowsPathWatchService_OVERLAPPED
#define _Included_name_pachler_nio_file_impl_WindowsPathWatchService_OVERLAPPED
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     name_pachler_nio_file_impl_WindowsPathWatchService_OVERLAPPED
 * Method:    allocatePeer
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_name_pachler_nio_file_impl_WindowsPathWatchService_00024OVERLAPPED_allocatePeer
  (JNIEnv *, jclass);

/*
 * Class:     name_pachler_nio_file_impl_WindowsPathWatchService_OVERLAPPED
 * Method:    deallocatePeer
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_name_pachler_nio_file_impl_WindowsPathWatchService_00024OVERLAPPED_deallocatePeer
  (JNIEnv *, jclass, jlong);

/*
 * Class:     name_pachler_nio_file_impl_WindowsPathWatchService_OVERLAPPED
 * Method:    setEventOnPeer
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_name_pachler_nio_file_impl_WindowsPathWatchService_00024OVERLAPPED_setEventOnPeer
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     name_pachler_nio_file_impl_WindowsPathWatchService_OVERLAPPED
 * Method:    setOffsetOnPeer
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_name_pachler_nio_file_impl_WindowsPathWatchService_00024OVERLAPPED_setOffsetOnPeer
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     name_pachler_nio_file_impl_WindowsPathWatchService_OVERLAPPED
 * Method:    initNative
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_name_pachler_nio_file_impl_WindowsPathWatchService_00024OVERLAPPED_initNative
  (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
