<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="jfilewatch" default="default" basedir="."
	xmlns:j2seproject1="http://www.netbeans.org/ns/j2se-project/1" >
    <description>Builds, tests, and runs the project jfilewatch.</description>
    <property file="version.properties"/>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="jfilewatch-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->

    <target name="-pre-compile">
		<!--
		update the manifest file if necessary.
		The MANIFEST.MF file is createe from a template file in the root
		directory (typcally named MANIFEST.MF.template; the name of both
		are defined by the manifest.file and manifest.file.template
		properties in the project.properties file).
		The template file is run through a search and replace process for
		properties in the version.properties file, which sets the major and
		minor version in the manifest.
		-->
		<uptodate targetfile="${manifest.file}" property="manifest.needs.rebuilding" value="false">
			<srcfiles dir="${basedir}">
				<filename name="${manifest.file.template}"/>
				<filename name="version.properties"/>
			</srcfiles>
		</uptodate>
		<copyfile src="${manifest.file.template}" dest="${manifest.file}"/>
		<replace file="${manifest.file}" replacefilterfile="version.properties"/>

		<!--
		This project doesn't contain the Java files for jpathwatch (apart from
		the unit tests) - these are in jpathwatch-java. So instead of compiling
		sources, it simply 'adopts' the classes from jpathwatch-java and
		merges them together with the native libraries in jpathwatch-native.
		-->
		<copy todir="${build.classes.dir}">
			<!--
			native libraries - this will pick up all native library binaries
			that are in dist/Release. Note that there are no dependencies set
			up - it will simply pick up what's there, so for a full build,
			make sure that all native libraries have been built and are
			up-to-date.
			-->
			<fileset erroronmissingdir="true" dir="jpathwatch-native/dist/Release"/>

			<!--
			Java classes for jpathwatch - these are 'stolen' from
			jpathwatch-java.jar
			-->
			<zipfileset src="jpathwatch-java/dist/jpathwatch-java.jar"/>
		</copy>
    </target>

	<target name="-post-jar">
		<!--
		Copy the documentation (if it was built) into the distribution
		directory.
		-->
		<mkdir dir="${dist.dir}/doc"/>
		<copy todir="${dist.dir}/doc">
			<fileset erroronmissingdir="false" dir="jpathwatch-java/dist/javadoc"/>
		</copy>
		<copy todir="${dist.dir}">
			<fileset file="README.txt"/>
			<fileset file="LICENSE.txt"/>
		</copy>
		<!-- Manually clean up distribution directory - not nice, but no idea
		where this gets built, so I just delete it here -->
		<deltree dir="${dist.dir}/lib"/>
	</target>
</project>
